{"displayName":"Dev Containers","description":"Open any folder or repository inside a Docker container and take advantage of Visual Studio Code's full feature set.","capabilities.untrustedWorkspaces.description":"Opening a folder in a container requires workspace trust.","continueEditSession.containerVolume":"Continue Working in Container Volume","configuration.title":"Dev Containers","configuration.defaultExtensions.deprecationMessage":"Use 'dev.containers.defaultExtensions' instead.","configuration.defaultExtensions.markdownDeprecationMessage":"Use `#dev.containers.defaultExtensions#` instead.","configuration.defaultExtensions.description":"Configures the list of extensions to always install while creating a container.","configuration.defaultExtensions.errorMessage":"Expected format '${publisher}.${name}'. Example: 'vscode.csharp'.","configuration.defaultFeatures":"Configures the list of features to always install while creating a container.","configuration.workspaceMountConsistency.deprecationMessage":"Use 'dev.containers.workspaceMountConsistency' instead.","configuration.workspaceMountConsistency.markdownDeprecationMessage":"Use `#dev.containers.workspaceMountConsistency#` instead.","configuration.workspaceMountConsistency.consistent":"Perfect consistency.","configuration.workspaceMountConsistency.cached":"The host’s view is authoritative.","configuration.workspaceMountConsistency.delegated":"The container’s view is authoritative.","configuration.workspaceMountConsistency.description":"The consistency level used for the workspace mount (existing containers must be rebuilt to take effect).","configuration.gpuAvailability.all":"All GPUs are available. This expects the host to have a GPU.","configuration.gpuAvailability.detect":"Availability should be detected automatically.","configuration.gpuAvailability.none":"No GPUs are available.","configuration.gpuAvailability.description":"Availability of GPUs when a dev container requires any.","configuration.cacheVolume.deprecationMessage":"Use 'dev.containers.cacheVolume' instead.","configuration.cacheVolume.markdownDeprecationMessage":"Use `#dev.containers.cacheVolume#` instead.","configuration.cacheVolume.description":"Controls whether a Docker volume should be used to cache the VS Code server and extensions.","configuration.copyGitConfig.deprecationMessage":"Use 'dev.containers.copyGitConfig' instead.","configuration.copyGitConfig.markdownDeprecationMessage":"Use `#dev.containers.copyGitConfig#` instead.","configuration.copyGitConfig.markdownDescription":"Controls whether the Git configuration (`~/.gitconfig`) should be copied into the container. This is done after installing any `#dotfiles.repository#` and will not overwrite an existing Git configuration file.","configuration.gitCredentialHelperConfigLocation.deprecationMessage":"Use 'dev.containers.gitCredentialHelperConfigLocation' instead.","configuration.gitCredentialHelperConfigLocation.markdownDeprecationMessage":"Use `#dev.containers.gitCredentialHelperConfigLocation#` instead.","configuration.gitCredentialHelperConfigLocation.system":"Write to system config (`/etc/gitconfig`, requires root access).","configuration.gitCredentialHelperConfigLocation.global":"Write to user config (`~/.gitconfig`).","configuration.gitCredentialHelperConfigLocation.none":"Do not set a credential helper.","configuration.gitCredentialHelperConfigLocation.description":"Where to write the configuration for the Git credential helper.","configuration.dockerCredentialHelper.markdownDescription":"Controls whether a credential helper should be registered as the `credStore` in the Docker configuration (`~/.docker/config.json`) of dev containers. This will not overwrite an existing `credStore` entry in the configuration file.","configuration.mountWaylandSocket.markdownDescription":"Controls whether a Wayland socket, if one exists, should be mounted into the Dev Container.","configuration.logLevel.deprecationMessage":"Use 'dev.containers.logLevel' instead.","configuration.logLevel.markdownDeprecationMessage":"Use `#dev.containers.logLevel#` instead.","configuration.logLevel.description":"The log level for the extension.","configuration.dockerPath.deprecationMessage":"Use 'dev.containers.dockerPath' instead.","configuration.dockerPath.markdownDeprecationMessage":"Use `#dev.containers.dockerPath#` instead.","configuration.dockerPath.description":"Docker (or Podman) executable name or path.","configuration.dockerComposePath.deprecationMessage":"Use 'dev.containers.dockerComposePath' instead.","configuration.dockerComposePath.markdownDeprecationMessage":"Use `#dev.containers.dockerComposePath#` instead.","configuration.dockerComposePath.description":"Docker Compose executable name or path.","configuration.dockerSocketPath.description":"Docker socket path. Used, e.g., when connecting to a Dev Container with the devcontainer.json in a Docker Volume.","configuration.executeInWSL.deprecationMessage":"Use 'dev.containers.executeInWSL' instead.","configuration.executeInWSL.markdownDeprecationMessage":"Use `#dev.containers.executeInWSL#` instead.","configuration.executeInWSL.description":"Controls whether CLI commands should always be executed in WSL. The default is to only execute in WSL for workspace folders in WSL. This setting has no effect on other platforms than Windows.","configuration.executeInWSLDistro.deprecationMessage":"Use 'dev.containers.executeInWSLDistro' instead.","configuration.executeInWSLDistro.markdownDeprecationMessage":"Use `#dev.containers.executeInWSLDistro#` instead.","configuration.executeInWSLDistro.markdownDescription":"WSL distro to use when not reopening a WSL folder. The default is to use the default WSL distro (see `wsl -l`). This setting has no effect when `#dev.containers.executeInWSL#` is not enabled or on other platforms than Windows.","configuration.forwardWSLServices.description":"Controls whether services in WSL (SSH agent, GPG agent, X display, Wayland display) are forwarded into the container. This setting has no effect on other platforms than Windows.","configuration.dotfiles.repository.deprecationMessage":"Use 'dotfiles.repository' instead.","configuration.dotfiles.repository.markdownDeprecationMessage":"Use `#dotfiles.repository#` instead.","configuration.dotfiles.repository.description":"URL of a dotfiles Git repository (e.g., https://github.com/owner/repository.git) or owner/repository of a GitHub repository.","configuration.dotfiles.installCommand.deprecationMessage":"Use 'dotfiles.installCommand' instead.","configuration.dotfiles.installCommand.markdownDeprecationMessage":"Use `#dotfiles.installCommand#` instead.","configuration.dotfiles.installCommand.description":"The command to run after cloning the dotfiles repository. Defaults to run the first file of `install.sh`, `install`, `bootstrap.sh`, `bootstrap`, `setup.sh` and `setup` found in the dotfiles repository's root folder.","configuration.dotfiles.targetPath.deprecationMessage":"Use 'dotfiles.targetPath' instead.","configuration.dotfiles.targetPath.markdownDeprecationMessage":"Use `#dotfiles.targetPath#` instead.","configuration.dotfiles.targetPath.description":"The path to clone the dotfiles repository to. Defaults to `~/dotfiles`.","configuration.repositoryConfigurationPaths.deprecationMessage":"Use 'dev.containers.repositoryConfigurationPaths' instead.","configuration.repositoryConfigurationPaths.markdownDeprecationMessage":"Use `#dev.containers.repositoryConfigurationPaths#` instead.","configuration.repositoryConfigurationPaths.markdownDescription":{"message":"List of additional paths to search for [repository configurations](https://code.visualstudio.com/docs/devcontainers/create-dev-container#_alternative-repository-configuration-folders).","comment":["{Locked='](https://code.visualstudio.com/docs/devcontainers/create-dev-container#_alternative-repository-configuration-folders)'}"]},"configuration.experimentalLockfile.description":"Controls whether an experimental devcontainer-lock.json should be written. This functionality is experimental and may change in the future.","configuration.optimisticallyLaunchDocker.description":"Optimistically attempt to start docker if the daemon is not already running.","command.category":"Dev Containers","command.developerCategory":"Dev Containers Developer","command.reopenInContainer":"Reopen in Container","command.rebuildAndReopenInContainer":"Rebuild and Reopen in Container","command.rebuildNoCacheAndReopenInContainer":"Rebuild Without Cache and Reopen in Container","command.reopenLocally":"Reopen Folder Locally","command.reopenInWSL":"Reopen Folder in WSL","command.reopenInSSH":"Reopen Folder in SSH","command.reopenInTunnel":"Reopen Folder in Tunnel","command.openFolder":"Open Folder in Container...","command.openFolderInContainerInCurrentWindow":"Open in Container in Current Window","command.openFolderInContainerInNewWindow":"Open in Container in New Window","command.openInformationAboutMountPerformance":"Clone repository in Docker volume for better I/O performance.","command.openRepositoryInVolume":"Clone Repository in Named Container Volume...","command.openRepositoryInUniqueVolume":"Clone Repository in Container Volume...","command.openRepositoryFromRemoteHubWithEditSession":"Clone Repository in a Container Volume","command.openRepositoryFromGitWithEditSession":"Clone Repository in a Container Volume","command.openPullRequestInVolume":"Clone GitHub Pull Request in Container Volume...","command.inspectVolume":"Explore a Volume in a Dev Container...","command.openWorkspace":"Open Workspace in Container...","command.attachToRunningContainer":"Attach to Running Container...","command.attachToRunningContainerFromViewlet":"Attach Visual Studio Code","command.inspectVolumeFromViewlet":"Explore in a Dev Container","command.cloneInVolumeFromViewlet":"Clone into existing Volume","command.cleanUpDevContainers":"Clean Up Dev Containers...","command.pruneVolumes":"Clean Up Dev Volumes...","command.explorerVolumesRefresh":"Refresh","command.attachToK8sContainer":"Attach to Running Kubernetes Container...","command.attachToK8sContainerFromViewlet":"Attach Visual Studio Code","command.switchContainer":"Switch Container","command.rebuildContainer":"Rebuild Container","command.rebuildContainerNoCache":"Rebuild Container Without Cache","command.createDevContainerFile":"Add Dev Container Configuration Files...","command.createDevContainerFileWithCopilot":"Add Dev Container Configuration Files using GitHub Copilot...","command.createDevContainer":"New Dev Container...","command.settings":"Settings","command.getHelp":"Help","command.getStarted":"Get Started with Dev Containers","command.trySample":"Try a Dev Container Sample...","command.reportIssue":"Report Issue...","command.provideFeedback":"Provide Feedback","command.openDevContainerFile":"Open Container Configuration File","command.openAttachConfigByNameFile":"Open Named Container Configuration File","command.openAttachDevContainerFile":"Open Attached Container Configuration File...","command.revealLogTerminal":"Show Container Log","command.openLogFile":"Show All Logs...","command.openLastLogFile":"Show Previous Log","command.testConnection":"Test Connection","command.attachToContainerInCurrentWindow":"Attach in Current Window","command.attachToContainerInNewWindow":"Attach in New Window","command.stopContainer":"Stop Container","command.startContainer":"Start Container","command.removeContainer":"Remove Container","command.removeRecentFolder":"Remove Recent Folder","command.showDetails":"Show Details","command.explorerTargetsRefresh":"Refresh","command.explorerDetailsRefresh":"Refresh","command.inspectDockerResource":"Inspect","command.inspectInBasicDevContainer":"Explore in Dev Container","command.cloneInVolume":"Clone Repository in Volume","command.removeVolume":"Remove","command.newContainer":"New Dev Container","command.showContainerLog":"Show Container Log","command.addExtensionToConfig":"Add to devcontainer.json","command.checkoutPRInVolume":"Checkout Pull Request in Dev Container","command.showReopenInContainerNotificationReset":"Reset Don't Show Reopen Notification","command.showRecoveryContainerNotificationReset":"Reset Don't Show Recovery Container Notification","command.labelPortAndUpdateConfig":"Set Label and Update devcontainer.json","command.installDocker":"Install Docker","command.installDockerInWSL":"Install Docker in WSL","command.installUserCLI":"Install devcontainer CLI","command.configureContainerFeatures":"Configure Container Features...","resourceLabelFormatters.dev-container.workspaceSuffix":"Dev Container","resourceLabelFormatters.attached-container.workspaceSuffix":"Container","resourceLabelFormatters.exec.workspaceSuffix":"Exec","resourceLabelFormatters.k8s-container.workspaceSuffix":"Kubernetes","views.remote.targetsContainers":"Dev Containers","views.remote.detailsContainers":"Details (Containers)","views.remote.devVolumes":"Dev Volumes","viewsWelcome.targetsContainers.needsDockerStartOrInstall":{"message":"Get started with containers by [installing Docker](command:remote-containers.installDocker) or by visiting the [help view](command:~remote.helpPanel.focus). [Refresh](command:remote-containers.explorerTargetsRefresh) after installation and startup.","comment":["{Locked='](command:remote-containers.installDocker)'}","{Locked='](command:~remote.helpPanel.focus)'}","{Locked='](command:remote-containers.explorerTargetsRefresh)'}"]},"viewsWelcome.targetsContainers.needsSSHCredentials":{"message":"[Refresh](command:remote-containers.explorerTargetsRefresh) to provide SSH credentials.","comment":["{Locked='](command:remote-containers.explorerTargetsRefresh)'}"]},"viewsWelcome.targetsContainers.noContainersWithFolder":{"message":"Get started with containers by running one of the [Dev Containers](command:remote-containers.newContainer) commands.\nYou can [reopen the current folder in a container](command:remote-containers.reopenInContainer), or open another folder in a container.\n[Open Folder in Container](command:remote-containers.openFolder)\nIf you're new to containers and want to [try a sample](command:remote-containers.trySample), there are several to choose from.","comment":["{Locked='](command:remote-containers.newContainer)'}","{Locked='](command:remote-containers.reopenInContainer)'}","{Locked='](command:remote-containers.openFolder)'}","{Locked='](command:remote-containers.trySample)'}"]},"viewsWelcome.targetsContainers.noContainersWithoutFolder":{"message":"Get started with containers by running one of the [Dev Containers](command:remote-containers.newContainer) commands.\nYou can open an existing folder in a container.\n[Open Folder in Container](command:remote-containers.openFolder)\nIf you're new to containers and want to [try a sample](command:remote-containers.trySample), there are several to choose from.","comment":["{Locked='](command:remote-containers.newContainer)'}","{Locked='](command:remote-containers.openFolder)'}","{Locked='](command:remote-containers.trySample)'}"]},"viewsWelcome.devVolumes.noDevVolumes":{"message":"If there's a repository you want to work with you can clone that directly in a container volume.\n[Clone Repository in Container Volume](command:remote-containers.openRepositoryInUniqueVolume)\n","comment":["{Locked='](command:remote-containers.openRepositoryInUniqueVolume)'}"]}}
