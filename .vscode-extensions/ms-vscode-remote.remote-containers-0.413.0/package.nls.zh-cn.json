{"capabilities.untrustedWorkspaces.description":"在容器中打开文件夹需要工作区信任。","command.addExtensionToConfig":"添加到 devcontainer.json","command.attachToContainerInCurrentWindow":"在当前窗口中附加","command.attachToContainerInNewWindow":"在新窗口中附加","command.attachToK8sContainer":"附加到正在运行的 Kubernetes 容器...","command.attachToK8sContainerFromViewlet":"附加 Visual Studio Code","command.attachToRunningContainer":"附加到正在运行的容器...","command.attachToRunningContainerFromViewlet":"附加 Visual Studio Code","command.category":"开发容器","command.checkoutPRInVolume":"开发容器中的签出拉取请求","command.cleanUpDevContainers":"清理开发容器...","command.cloneInVolume":"在卷中克隆存储库","command.cloneInVolumeFromViewlet":"克隆到现有卷","command.configureContainerFeatures":"配置容器功能...","command.createDevContainer":"新的开发容器...","command.createDevContainerFile":"添加开发容器配置文件...","command.createDevContainerFileWithCopilot":"使用 GitHub Copilot 添加开发容器配置文件...","command.developerCategory":"开发容器开发人员","command.explorerDetailsRefresh":"刷新","command.explorerTargetsRefresh":"刷新","command.explorerVolumesRefresh":"刷新","command.getHelp":"帮助","command.getStarted":"开始使用开发容器","command.inspectDockerResource":"检查","command.inspectInBasicDevContainer":"在开发容器中浏览","command.inspectVolume":"在开发容器中浏览卷...","command.inspectVolumeFromViewlet":"在开发容器中浏览","command.installDocker":"安装 Docker","command.installDockerInWSL":"在 WSL 中安装 Docker","command.installUserCLI":"安装 devcontainer CLI","command.labelPortAndUpdateConfig":"设置标签并更新 devcontainer.json","command.newContainer":"新的开发容器","command.openAttachConfigByNameFile":"打开命名容器配置文件","command.openAttachDevContainerFile":"打开附加的容器配置文件...","command.openDevContainerFile":"打开容器配置文件","command.openFolder":"在容器中打开文件夹...","command.openFolderInContainerInCurrentWindow":"在当前窗口的容器中打开","command.openFolderInContainerInNewWindow":"在新窗口的容器中打开","command.openInformationAboutMountPerformance":"在 Docker 卷中克隆存储库以提高 I/O 性能。","command.openLastLogFile":"显示上一个日志","command.openLogFile":"显示所有日志...","command.openPullRequestInVolume":"在容器卷中克隆 GitHub 拉取请求...","command.openRepositoryFromGitWithEditSession":"在容器卷中克隆存储库","command.openRepositoryFromRemoteHubWithEditSession":"在容器卷中克隆存储库","command.openRepositoryInUniqueVolume":"在容器卷中克隆存储库...","command.openRepositoryInVolume":"在命名容器卷中克隆存储库...","command.openWorkspace":"在容器中打开工作区...","command.provideFeedback":"提供反馈","command.pruneVolumes":"清理开发卷...","command.rebuildAndReopenInContainer":"在容器中重新生成并重新打开","command.rebuildContainer":"重新生成容器","command.rebuildContainerNoCache":"重新生成无缓存的容器","command.rebuildNoCacheAndReopenInContainer":"在无缓存的情况下重新生成并在容器中重新打开","command.removeContainer":"删除容器","command.removeRecentFolder":"删除最近使用的文件夹","command.removeVolume":"删除","command.reopenInContainer":"在容器中重新打开","command.reopenInSSH":"在 SSH 中重新打开文件夹","command.reopenInTunnel":"在 Tunnel 中重新打开文件夹","command.reopenInWSL":"在 WSL 中重新打开文件夹","command.reopenLocally":"在本地重新打开文件夹","command.reportIssue":"报告问题...","command.revealLogTerminal":"显示容器日志","command.settings":"设置","command.showContainerLog":"显示容器日志","command.showDetails":"显示详细信息","command.showRecoveryContainerNotificationReset":"重置不显示恢复容器通知","command.showReopenInContainerNotificationReset":"重置不显示重新打开通知","command.startContainer":"启动容器","command.stopContainer":"停止容器","command.switchContainer":"切换容器","command.testConnection":"测试连接","command.trySample":"试用开发容器示例...","configuration.cacheVolume.deprecationMessage":"改用 \"dev.containers.cacheVolume\"。","configuration.cacheVolume.description":"控制是否应使用 Docker 卷来缓存 VS Code 服务器和扩展。","configuration.cacheVolume.markdownDeprecationMessage":"改用 \"#dev.containers.cacheVolume#\"。","configuration.copyGitConfig.deprecationMessage":"改用 \"dev.containers.copyGitConfig\"。","configuration.copyGitConfig.markdownDeprecationMessage":"改用 \"#dev.containers.copyGitConfig#\"。","configuration.copyGitConfig.markdownDescription":"控制是否应将 Git 配置(\"~/.gitconfig\")复制到容器中。此操作在安装任何 \"#dotfiles.repository#\" 后完成，且不会覆盖现有的 Git 配置文件。","configuration.defaultExtensions.deprecationMessage":"改用 \"dev.containers.defaultExtensions\"。","configuration.defaultExtensions.description":"将扩展列表配置为始终在创建容器时安装。","configuration.defaultExtensions.errorMessage":"预期的格式 \"${publisher}.${name}\"。例如: \"vscode.csharp\"。","configuration.defaultExtensions.markdownDeprecationMessage":"改用 \"#dev.containers.defaultExtensions#\"。","configuration.defaultFeatures":"将功能列表配置为始终在创建容器时安装。","configuration.dockerComposePath.deprecationMessage":"改用 \"dev.containers.dockerComposePath\"。","configuration.dockerComposePath.description":"Docker Compose 可执行名称或路径。","configuration.dockerComposePath.markdownDeprecationMessage":"改用 \"#dev.containers.dockerComposePath#\"。","configuration.dockerCredentialHelper.markdownDescription":"控制是否应在开发容器的 Docker 配置(\"~/.docker/config.json\")中将凭据帮助程序注册为 \"credStore\"。这不会覆盖配置文件中的现有 \"credStore\" 条目。","configuration.dockerPath.deprecationMessage":"改用 \"dev.containers.dockerPath\"。","configuration.dockerPath.description":"Docker (或 Podman)可执行文件名称或路径。","configuration.dockerPath.markdownDeprecationMessage":"改用 \"#dev.containers.dockerPath#\"。","configuration.dockerSocketPath.description":"Docker 套接字路径。例如，在 Docker 卷中使用 devcontainer.json 连接到开发容器时使用。","configuration.dotfiles.installCommand.deprecationMessage":"改用 \"dotfiles.installCommand\"。","configuration.dotfiles.installCommand.description":"克隆点文件存储库后要运行的命令。默认运行点文件存储库根文件夹中找到的第一个文件 \"install.sh\"、\"install\"、\"bootstrap.sh\"、\"bootstrap\"、\"setup.sh\" 和 \"setup\"。","configuration.dotfiles.installCommand.markdownDeprecationMessage":"改用 \"#dotfiles.installCommand#\"。","configuration.dotfiles.repository.deprecationMessage":"改用 \"dotfiles.repository\"。","configuration.dotfiles.repository.description":"点文件 Git 存储库的 URL(例如 https://github.com/owner/repository.git)或 GitHub 存储库的所有者/存储库。","configuration.dotfiles.repository.markdownDeprecationMessage":"改用 \"#dotfiles.repository#\"。","configuration.dotfiles.targetPath.deprecationMessage":"改用 \"dotfiles.targetPath\"。","configuration.dotfiles.targetPath.description":"要将点文件存储库克隆到的路径。默认为 \"~/dotfiles\"。","configuration.dotfiles.targetPath.markdownDeprecationMessage":"改用 \"#dotfiles.targetPath#\"。","configuration.executeInWSL.deprecationMessage":"改用 \"dev.containers.executeInWSL\"。","configuration.executeInWSL.description":"控制是否应始终在 WSL 中执行 CLI 命令。对于 WSL 中的工作区文件夹，默认仅在 WSL 中执行。此设置在 Windows 以外的其他平台上无效。","configuration.executeInWSL.markdownDeprecationMessage":"改用 \"#dev.containers.executeInWSL#\"。","configuration.executeInWSLDistro.deprecationMessage":"改用 \"dev.containers.executeInWSLDistro\"。","configuration.executeInWSLDistro.markdownDeprecationMessage":"改用 \"#dev.containers.executeInWSLDistro#\"。","configuration.executeInWSLDistro.markdownDescription":"不重新打开 WSL 文件夹时要使用的 WSL 发行版。默认使用默认 WSL 发行版(请参阅 \"wsl -l\")。如果 \"#dev.containers.executeInWSL#\" 未启用或在 Windows 以外的其他平台上，此设置无效。","configuration.experimentalLockfile.description":"控制是否应编写实验性 devcontainer-lock.json。此功能为实验性功能，未来可能会更改。","configuration.forwardWSLServices.description":"控制是否将 WSL (SSH 代理、GPG 代理、X 显示器、Wayland 显示器)中的服务转发到容器中。此设置对 Windows 以外的其他平台没有影响。","configuration.gitCredentialHelperConfigLocation.deprecationMessage":"改用 \"dev.containers.gitCredentialHelperConfigLocation\"。","configuration.gitCredentialHelperConfigLocation.description":"Git 凭据帮助程序的配置写入位置。","configuration.gitCredentialHelperConfigLocation.global":"写入用户配置(\"~/.gitconfig\")。","configuration.gitCredentialHelperConfigLocation.markdownDeprecationMessage":"改用 \"#dev.containers.gitCredentialHelperConfigLocation#\"。","configuration.gitCredentialHelperConfigLocation.none":"不要设置凭据帮助程序。","configuration.gitCredentialHelperConfigLocation.system":"写入系统配置(\"/etc/gitconfig\"，需要根访问权限)。","configuration.gpuAvailability.all":"所有 GPU 均可用。这要求主机具有 GPU。","configuration.gpuAvailability.description":"当开发容器需要任何 GPU 时 GPU 的可用性。","configuration.gpuAvailability.detect":"应自动检测可用性。","configuration.gpuAvailability.none":"没有可用的 GPU。","configuration.logLevel.deprecationMessage":"改用 \"dev.containers.logLevel\"。","configuration.logLevel.description":"扩展的日志级别。","configuration.logLevel.markdownDeprecationMessage":"改用 \"#dev.containers.logLevel#\"。","configuration.mountWaylandSocket.markdownDescription":"控制是否应将 Wayland 套接字(如果存在)装载到开发容器中。","configuration.optimisticallyLaunchDocker.description":"如果守护程序尚未运行，则乐观地尝试启动 docker。","configuration.repositoryConfigurationPaths.deprecationMessage":"改用 \"dev.containers.repositoryConfigurationPaths\"。","configuration.repositoryConfigurationPaths.markdownDeprecationMessage":"改用 \"#dev.containers.repositoryConfigurationPaths#\"。","configuration.repositoryConfigurationPaths.markdownDescription":"要搜索[存储库配置](https://code.visualstudio.com/docs/devcontainers/create-dev-container#_alternative-repository-configuration-folders)的其他路径列表。","configuration.title":"开发容器","configuration.workspaceMountConsistency.cached":"主机视图具有权威性。","configuration.workspaceMountConsistency.consistent":"完全一致性。","configuration.workspaceMountConsistency.delegated":"容器视图具有权威性。","configuration.workspaceMountConsistency.deprecationMessage":"改用 \"dev.containers.workspaceMountConsistency\"。","configuration.workspaceMountConsistency.description":"用于工作区装载的一致性级别(必须重新生成现有容器才能生效)。","configuration.workspaceMountConsistency.markdownDeprecationMessage":"改用 \"#dev.containers.workspaceMountConsistency#\"。","continueEditSession.containerVolume":"继续在容器卷中工作","description":"在 Docker 容器内打开任何文件夹或存储库，并利用Visual Studio Code 的完整功能集。","displayName":"开发容器","resourceLabelFormatters.attached-container.workspaceSuffix":"容器","resourceLabelFormatters.dev-container.workspaceSuffix":"开发容器","resourceLabelFormatters.exec.workspaceSuffix":"Exec","resourceLabelFormatters.k8s-container.workspaceSuffix":"Kubernetes","views.remote.detailsContainers":"详细信息(容器)","views.remote.devVolumes":"开发卷","views.remote.targetsContainers":"开发容器","viewsWelcome.devVolumes.noDevVolumes":"如果有要使用的存储库，可以直接在容器卷中克隆该存储库。\n[在容器卷中克隆存储库](command:remote-containers.openRepositoryInUniqueVolume)\n","viewsWelcome.targetsContainers.needsDockerStartOrInstall":"[安装 Docker](command:remote-containers.installDocker)或访问 [帮助视图](command:~remote.helpPanel.focus)以开始使用容器。安装和启动后 [刷新](command:remote-containers.explorerTargetsRefresh)。","viewsWelcome.targetsContainers.needsSSHCredentials":"[刷新](command:remote-containers.explorerTargetsRefresh)以提供 SSH 凭据。","viewsWelcome.targetsContainers.noContainersWithFolder":"运行 [开发容器](command:remote-containers.newContainer)命令之一以开始使用容器。\n可以[在容器中重新打开当前文件夹](command:remote-containers.reopenInContainer)，或者在容器中打开另一个文件夹。\n[在容器中打开文件夹](command:remote-containers.openFolder)\n如果不熟悉容器，并且想要 [试用示例](command:remote-containers.trySample)，有几个选项可供选择。","viewsWelcome.targetsContainers.noContainersWithoutFolder":"运行 [开发容器](command:remote-containers.newContainer)命令之一以开始使用容器。\n可以在容器中打开现有文件夹。\n[在容器中打开文件夹](command:remote-containers.openFolder)\n如果不熟悉容器，并且想要 [试用示例](command:remote-containers.trySample)，有几个选项可供选择。"}
